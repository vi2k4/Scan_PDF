import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import sys

<<<<<<< HEAD
# K·∫øt n·ªëi MySQL
def connect_db():
    try:
        return mysql.connector.connect(
            host="localhost",
            user="root",  # Thay b·∫±ng user c·ªßa b·∫°n
            password="",  # Thay b·∫±ng password c·ªßa b·∫°n
            database="my_scanner_db"
        )
    except Error as e:
        print(f"L·ªói k·∫øt n·ªëi MySQL: {e}")
        return None

# H√†m bƒÉm m·∫≠t kh·∫©u
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()
=======
# Th√™m th∆∞ m·ª•c g·ªëc (PYTHON) v√†o sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from db.connect import create_connection  # Import t·ª´ file connect.py
>>>>>>> 03a7e3b43494ab16ca94f6504a58aa1603b81b81

# CƒÉn gi·ªØa c·ª≠a s·ªï
def center_window(win, width=400, height=300):
    win.update_idletasks()
    x = (win.winfo_screenwidth() - width) // 2
    y = (win.winfo_screenheight() - height) // 2
    win.geometry(f"{width}x{height}+{x}+{y}")

# L·∫•y th√¥ng tin t√†i kho·∫£n
def get_user_info(user_id):
    print(f"DEBUG: ƒêang l·∫•y th√¥ng tin user v·ªõi user_id = {user_id}")
    conn = create_connection()
    
    if not conn:
        print("L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi database!")
        return None

    try:
        cursor = conn.cursor()
        sql = "SELECT username, email, role, is_active, created_at FROM users WHERE user_id = %s"
        print(f"DEBUG: Th·ª±c thi SQL: {sql} v·ªõi user_id = {user_id}")
        cursor.execute(sql, (user_id,))
        result = cursor.fetchone()
        print(f"DEBUG: K·∫øt qu·∫£ truy v·∫•n: {result}")
        return result
    except Exception as e:
        print(f"L·ªñI DATABASE: {e}")
        return None
    finally:
        cursor.close()
        conn.close()
        print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi.")

# Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n
def show_user_info(root, user_id, top_frame):
    if user_id is None:
        print("L·ªñI: user_id b·ªã None, kh√¥ng th·ªÉ l·∫•y th√¥ng tin!")
        return

    user_id = str(user_id)  # ƒê·∫£m b·∫£o user_id lu√¥n l√† chu·ªói
    print(f"DEBUG: ƒêang hi·ªÉn th·ªã th√¥ng tin user v·ªõi user_id = {user_id}")

    for widget in root.winfo_children():
        if widget not in top_frame.winfo_children():
            widget.pack_forget()

    user_info = get_user_info(user_id)
    if not user_info:
        print("L·ªñI: Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user!")
        return

    print(f"DEBUG: D·ªØ li·ªáu user nh·∫≠n ƒë∆∞·ª£c: {user_info}")

    # T·∫°o giao di·ªán hi·ªÉn th·ªã th√¥ng tin user
    info_frame = tk.Frame(root, padx=20, pady=20)
    info_frame.pack(expand=True)

    tk.Label(info_frame, text="Th√¥ng Tin T√†i Kho·∫£n", font=("Arial", 20, "bold")).pack(pady=(0, 10))
    tk.Label(info_frame, text=f"üë§ Username: {user_info[0]}", font=("Arial", 14)).pack(pady=5, anchor="w")
    tk.Label(info_frame, text=f"üìß Email: {user_info[1]}", font=("Arial", 14)).pack(pady=5, anchor="w")
    tk.Label(info_frame, text=f"üîë Role: {user_info[2]}", font=("Arial", 14)).pack(pady=5, anchor="w")
    tk.Label(info_frame, text=f"‚úÖ Tr·∫°ng th√°i: {'Active' if user_info[3] else 'Inactive'}", font=("Arial", 14)).pack(pady=5, anchor="w")
    tk.Label(info_frame, text=f"üìÖ Ng√†y t·∫°o: {user_info[4]}", font=("Arial", 14)).pack(pady=5, anchor="w")

    tk.Button(info_frame, text="üîô Quay l·∫°i", font=("Arial", 14), command=lambda: load_settings(root, top_frame, user_id)).pack(pady=15)

    print("DEBUG: Giao di·ªán th√¥ng tin t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

# ƒê·ªïi m·∫≠t kh·∫©u
def change_password(root, user_id):
    def submit():
        old_pass = entry_old.get().strip()
        new_pass = entry_new.get().strip()
        confirm_pass = entry_confirm.get().strip()

        if not all([old_pass, new_pass, confirm_pass]):
            messagebox.showwarning("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", parent=popup)
            return
        
        if new_pass != confirm_pass:
            messagebox.showerror("L·ªói", "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!", parent=popup)
            return
        
        conn = create_connection()
        if not conn:
            return
        
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT password_hash FROM users WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            
            if not result:
                messagebox.showerror("L·ªói", "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!", parent=popup)
                return
            
            if old_pass != result[0]:
                messagebox.showerror("L·ªói", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!", parent=popup)
                return
            
            cursor.execute("UPDATE users SET password_hash = %s WHERE user_id = %s", (new_pass, user_id))
            conn.commit()
            
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", parent=popup)
            popup.destroy()
        except Exception as e:
            print(f"L·ªói database: {e}")
        finally:
            cursor.close()
            conn.close()
            print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi.")
    
    popup = tk.Toplevel(root)
    popup.title("ƒê·ªïi m·∫≠t kh·∫©u")
    center_window(popup)
    
    tk.Label(popup, text="M·∫≠t kh·∫©u c≈©:").pack()
    entry_old = tk.Entry(popup, show="*")
    entry_old.pack()
    
    tk.Label(popup, text="M·∫≠t kh·∫©u m·ªõi:").pack()
    entry_new = tk.Entry(popup, show="*")
    entry_new.pack()
    
    tk.Label(popup, text="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi:").pack()
    entry_confirm = tk.Entry(popup, show="*")
    entry_confirm.pack()
    
    tk.Button(popup, text="X√°c nh·∫≠n", command=submit).pack()

# Giao di·ªán c√†i ƒë·∫∑t
def load_settings(root, top_frame, user_id):
    print(f"DEBUG: T·∫£i giao di·ªán C√†i ƒë·∫∑t cho user_id = {user_id}")

    if not top_frame:
        print("L·ªñI: top_frame = None, kh√¥ng th·ªÉ hi·ªÉn th·ªã c√†i ƒë·∫∑t")
        return

    for widget in root.winfo_children():
        if widget is not top_frame:
            widget.pack_forget()

    setting_frame = tk.Frame(root, padx=20, pady=20)
    setting_frame.pack(fill=tk.BOTH, expand=True)

    def add_section(title, options):
        tk.Label(setting_frame, text=title, font=("Arial", 18, "bold")).pack(anchor="w", pady=(10, 5))
        for text, command in options:
            tk.Button(setting_frame, text=text, font=("Arial", 14), fg="black", bd=1, command=command).pack(anchor="w", pady=5)

    add_section("T√†i kho·∫£n", [
        ("Th√¥ng tin t√†i kho·∫£n", lambda: show_user_info(root, user_id, top_frame)),
        ("ƒê·ªïi m·∫≠t kh·∫©u", lambda: change_password(root, user_id)),
    ])

# Bi·ªÉu t∆∞·ª£ng camera
    try:
        img_path = os.path.abspath("img/Camera.png")
        img = Image.open(img_path).resize((100, 100))
    except FileNotFoundError:
        img = Image.new("RGB", (100, 100), (200, 200, 200))  

    icon = ImageTk.PhotoImage(img)
    btn_icon = tk.Button(root, image=icon, bd=0)
    btn_icon.image = icon
    btn_icon.place(relx=0.98, rely=0.95, anchor="se")

if __name__ == "__main__":
    user_id = 11
    root = tk.Tk()
    root.title("C√†i ƒë·∫∑t")
    root.geometry("900x700")

    top_frame = tk.Frame(root, height=40, bg="gray")
    top_frame.pack(side=tk.TOP, fill=tk.X)

    load_settings(root, top_frame, user_id)
    root.mainloop()
