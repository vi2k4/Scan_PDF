import hashlib
import tkinter as tk
from tkinter import messagebox
from mysql.connector import Error


import mysql
from PIL import Image, ImageTk
import os
import sys
from cryptography.fernet import Fernet
from tkinter import messagebox
import scan


if len(sys.argv) > 1:
    user_id = int (sys.argv[1])
else:
    user_id = None

# K·∫øt n·ªëi MySQL
def connect_db():
    try:
        return mysql.connector.connect(
            host="localhost",
            user="root",  # Thay b·∫±ng user c·ªßa b·∫°n
            password="",  # Thay b·∫±ng password c·ªßa b·∫°n
            database="my_scanner_db"
        )
    except Error as e:
        print(f"L·ªói k·∫øt n·ªëi MySQL: {e}")
        return None

# H√†m bƒÉm m·∫≠t kh·∫©u
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()
# Th√™m th∆∞ m·ª•c g·ªëc (PYTHON) v√†o sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from db.connect import create_connection  # Import t·ª´ file connect.py

# CƒÉn gi·ªØa c·ª≠a s·ªï
def center_window(win, width=400, height=300):
    win.update_idletasks()
    x = (win.winfo_screenwidth() - width) // 2
    y = (win.winfo_screenheight() - height) // 2
    win.geometry(f"{width}x{height}+{x}+{y}")

# L·∫•y th√¥ng tin t√†i kho·∫£n
def get_user_info(user_id):
    print(f"DEBUG: ƒêang l·∫•y th√¥ng tin user v·ªõi user_id = {user_id}")
    conn = create_connection()
    
    if not conn:
        print("L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi database!")
        return None

    try:
        cursor = conn.cursor()
        sql = "SELECT username, email, role, is_active, created_at FROM users WHERE user_id = %s"
        print(f"DEBUG: Th·ª±c thi SQL: {sql} v·ªõi user_id = {user_id}")
        cursor.execute(sql, (user_id,))
        result = cursor.fetchone()
        print(f"DEBUG: K·∫øt qu·∫£ truy v·∫•n: {result}")
        return result
    except Exception as e:
        print(f"L·ªñI DATABASE: {e}")
        return None
    finally:
        cursor.close()
        conn.close()
        print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi.")

def show_user_info(root, user_id):
    if user_id is None:
        print("L·ªñI: user_id b·ªã None, kh√¥ng th·ªÉ l·∫•y th√¥ng tin!")
        return

    user_id = str(user_id)  # ƒê·∫£m b·∫£o user_id lu√¥n l√† chu·ªói
    print(f"DEBUG: ƒêang hi·ªÉn th·ªã th√¥ng tin user v·ªõi user_id = {user_id}")

    user_info = get_user_info(user_id)
    if not user_info:
        print("L·ªñI: Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user!")
        return

    print(f"DEBUG: D·ªØ li·ªáu user nh·∫≠n ƒë∆∞·ª£c: {user_info}")

    # T·∫°o c·ª≠a s·ªï m·ªõi (Toplevel)
    info_window = tk.Toplevel(root)
    info_window.title("Th√¥ng Tin T√†i Kho·∫£n")
    info_window.configure(bg="white")

    # CƒÉn gi·ªØa c·ª≠a s·ªï
    window_width = 400
    window_height = 300
    screen_width = info_window.winfo_screenwidth()
    screen_height = info_window.winfo_screenheight()
    x_position = (screen_width - window_width) // 2
    y_position = (screen_height - window_height) // 2
    info_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

    # Ti√™u ƒë·ªÅ
    tk.Label(info_window, text="Th√¥ng Tin T√†i Kho·∫£n", font=("Arial", 18, "bold"), bg="white").pack(pady=10)

    # C√°c th√¥ng tin t√†i kho·∫£n
    details = [
        (f"üë§ Username: {user_info[0]}", "black"),
        (f"üìß Email: {user_info[1]}", "black"),
        (f"üîë Role: {user_info[2]}", "black"),
        (f"‚úÖ Tr·∫°ng th√°i: {'Active' if user_info[3] else 'Inactive'}", "green" if user_info[3] else "red"),
        (f"üìÖ Ng√†y t·∫°o: {user_info[4]}", "black"),
    ]

    for text, color in details:
        tk.Label(info_window, text=text, font=("Arial", 12), fg=color, bg="white", anchor="w").pack(pady=5, fill="x")

    # N√∫t ƒë√≥ng c·ª≠a s·ªï
    btn_close = tk.Button(info_window, text="ƒê√≥ng", font=("Arial", 12, "bold"), bg="gray", fg="white",
                          padx=10, pady=5, command=info_window.destroy)
    btn_close.pack(pady=15)

    print("DEBUG: Giao di·ªán th√¥ng tin t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")



# H√†m m√£ h√≥a/gi·∫£i m√£ m·∫≠t kh·∫©u
key = b"ljlJeB1u3Yyh8tYYYAObAevf5-nbv5qZz0_sPihFll8="

def encrypt_password(password: str) -> str:
    fernet = Fernet(key)
    encrypted = fernet.encrypt(password.encode())
    return encrypted.decode()

def decrypt_password(encrypted_password: str) -> str:
    fernet = Fernet(key)
    decrypted = fernet.decrypt(encrypted_password.encode())
    return decrypted.decode()

# H√†m ƒë·ªïi m·∫≠t kh·∫©u c√≥ m√£ h√≥a
def change_password(root, user_id):
    def submit():
        old_pass = entry_old.get().strip()
        new_pass = entry_new.get().strip()
        confirm_pass = entry_confirm.get().strip()

        if not all([old_pass, new_pass, confirm_pass]):
            messagebox.showwarning("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", parent=popup)
            return
        
        if new_pass != confirm_pass:
            messagebox.showerror("L·ªói", "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!", parent=popup)
            return

        conn = create_connection()
        if not conn:
            return
        
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT password_hash FROM users WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            
            if not result:
                messagebox.showerror("L·ªói", "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!", parent=popup)
                return

            # Gi·∫£i m√£ m·∫≠t kh·∫©u ƒë√£ l∆∞u v√† so s√°nh
            try:
                saved_password = decrypt_password(result[0])
            except Exception:
                messagebox.showerror("L·ªói", "L·ªói gi·∫£i m√£ m·∫≠t kh·∫©u c≈©!", parent=popup)
                return

            if old_pass != saved_password:
                messagebox.showerror("L·ªói", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!", parent=popup)
                return
            
            encrypted_new = encrypt_password(new_pass)
            cursor.execute("UPDATE users SET password_hash = %s WHERE user_id = %s", (encrypted_new, user_id))
            conn.commit()
            
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", parent=popup)
            popup.destroy()
        except Exception as e:
            print(f"L·ªói database: {e}")
            messagebox.showerror("L·ªói", "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!", parent=popup)
        finally:
            cursor.close()
            conn.close()
            print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi.")

    popup = tk.Toplevel(root)
    popup.title("ƒê·ªïi m·∫≠t kh·∫©u")
    center_window(popup, 600, 350)
    popup.configure(bg="white")

    frame = tk.Frame(popup, padx=20, pady=20, bg="white")
    frame.pack(expand=True)

    tk.Label(frame, text="üîë ƒê·ªïi m·∫≠t kh·∫©u", font=("Arial", 18, "bold"), bg="white").pack(pady=10)

    tk.Label(frame, text="M·∫≠t kh·∫©u c≈©:", font=("Arial", 14), bg="white").pack(anchor="w")
    entry_old = tk.Entry(frame, show="*", font=("Arial", 14), width=30)
    entry_old.pack(pady=5)

    tk.Label(frame, text="M·∫≠t kh·∫©u m·ªõi:", font=("Arial", 14), bg="white").pack(anchor="w")
    entry_new = tk.Entry(frame, show="*", font=("Arial", 14), width=30)
    entry_new.pack(pady=5)

    tk.Label(frame, text="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi:", font=("Arial", 14), bg="white").pack(anchor="w")
    entry_confirm = tk.Entry(frame, show="*", font=("Arial", 14), width=30)
    entry_confirm.pack(pady=5)

    btn_submit = tk.Button(frame, text="X√°c nh·∫≠n", font=("Arial", 14, "bold"), bg="blue", fg="white", width=15, command=submit)
    btn_submit.pack(pady=10)


# H√†m x√≥a t√†i kho·∫£n
def delete_account(root, user_id):
    def confirm_delete():
        conn = create_connection()
        if not conn:
            return
        
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT username FROM users WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            
            if not result:
                messagebox.showerror("L·ªói", "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!", parent=popup)
                return

            cursor.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
            conn.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "T√†i kho·∫£n ƒë√£ b·ªã x√≥a!", parent=popup)
            root.attributes("-disabled", False)  # Kh√¥i ph·ª•c quy·ªÅn ƒëi·ªÅu khi·ªÉn c·ª≠a s·ªï ch√≠nh
            popup.destroy()  # ƒê√≥ng c·ª≠a s·ªï x√°c nh·∫≠n x√≥a t√†i kho·∫£n
        except Exception as e:
            print(f"L·ªói database: {e}")
        finally:
            cursor.close()
            conn.close()

    # T·∫°o c·ª≠a s·ªï popup ƒë·ªÉ x√°c nh·∫≠n x√≥a t√†i kho·∫£n
    popup = tk.Toplevel(root)
    popup.title("X√≥a t√†i kho·∫£n")
    center_window(popup, 600, 250)
    popup.configure(bg="white")

    frame = tk.Frame(popup, padx=20, pady=20, bg="white")
    frame.pack(expand=True)

    tk.Label(frame, text="‚ö†Ô∏è X√°c nh·∫≠n x√≥a t√†i kho·∫£n", font=("Arial", 18, "bold"), fg="red", bg="white").pack(pady=10)
    tk.Label(frame, text="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n n√†y kh√¥ng?", font=("Arial", 14), bg="white").pack(pady=10)

    btn_frame = tk.Frame(frame, bg="white")
    btn_frame.pack(pady=10)

    # N√∫t h·ªßy, kh√¥ng ƒë√≥ng c·ª≠a s·ªï ch√≠nh
    btn_cancel = tk.Button(btn_frame, text="H·ªßy", font=("Arial", 14, "bold"), bg="gray", fg="white", width=10,
                           command=lambda: popup.destroy())  # Ch·ªâ ƒë√≥ng c·ª≠a s·ªï con popup
    btn_cancel.pack(side="left", padx=10)

    # N√∫t x√≥a t√†i kho·∫£n
    btn_delete = tk.Button(btn_frame, text="X√≥a", font=("Arial", 14, "bold"), bg="red", fg="white", width=10, command=confirm_delete)
    btn_delete.pack(side="left", padx=10)

    # V√¥ hi·ªáu h√≥a c·ª≠a s·ªï ch√≠nh ƒë·ªÉ ng·ª´ng t∆∞∆°ng t√°c khi popup m·ªü
    # root.attributes("-disabled", True)

    # S·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï con (popup) khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "X"
    # popup.protocol("WM_DELETE_WINDOW", lambda: root.attributes("-disabled", False) or popup.destroy())

# Giao di·ªán c√†i ƒë·∫∑t
# Th√™m n√∫t x√≥a v√†o giao di·ªán c√†i ƒë·∫∑t
def load_settings(root, top_frame, user_id):
    print(f"DEBUG: T·∫£i giao di·ªán C√†i ƒë·∫∑t cho user_id = {user_id}")

    if not top_frame:
        print("L·ªñI: top_frame = None, kh√¥ng th·ªÉ hi·ªÉn th·ªã c√†i ƒë·∫∑t")
        return

    for widget in root.winfo_children():
        if widget not in [top_frame]:  # Gi·ªØ l·∫°i top_frame
            widget.pack_forget()  # Ch·ªâ ·∫©n thay v√¨ x√≥a

    setting_frame = tk.Frame(root, padx=20, pady=20)
    setting_frame.pack(fill=tk.BOTH, expand=True)

    def add_section(title, options):
        tk.Label(setting_frame, text=title, font=("Arial", 25, "bold")).pack(anchor="w", pady=(15, 5))
        for text, command in options:
            tk.Button(setting_frame, text=text, font=("Arial", 17), fg="gray", bd=0, command=command).pack(anchor="w")

    add_section("T√†i kho·∫£n", [
        ("Th√¥ng tin t√†i kho·∫£n", lambda: show_user_info(root, user_id)),
        ("ƒê·ªïi m·∫≠t kh·∫©u", lambda: change_password(root, user_id)),
        ("X√≥a t√†i kho·∫£n", lambda: delete_account(root, user_id)),  # N√∫t x√≥a t√†i kho·∫£n
    ])
    add_section("Gi·ªõi thi·ªáu", [
        ("ch√≠nh s√°ch", None),
        ("Gi·∫•y ph√©p",None),
        ("...", None), 
    ])
    add_section("Trung t√¢m tr·ª£ gi√∫p", [
        ("H·ªó tr·ª£", None),
        ("ƒê·ªãa ch·ªâ: tr·ª• s·ªü SGU",None),
        ("Hotline: sƒëtxxx", None),  
    ])
# Bi·ªÉu t∆∞·ª£ng camera
    try:
        img_path = os.path.abspath("img/Camera.png")
        img = Image.open(img_path).resize((100, 100))
    except FileNotFoundError:
        img = Image.new("RGB", (100, 100), (200, 200, 200))  

    icon = ImageTk.PhotoImage(img)
    btn_icon = tk.Button(root, image=icon, bd=0)
    btn_icon.image = icon
    btn_icon.place(relx=0.98, rely=0.95, anchor="se")
    btn_icon.bind("<Button-1>", lambda event: scan.load_scan(root, top_frame))

if __name__ == "__main__":
    user_id = 12
    root = tk.Tk()
    root.title("C√†i ƒë·∫∑t")
    root.geometry("900x700")

    top_frame = tk.Frame(root, height=40, bg="gray")
    top_frame.pack(side=tk.TOP, fill=tk.X)

    load_settings(root, top_frame, user_id)
    root.mainloop()
